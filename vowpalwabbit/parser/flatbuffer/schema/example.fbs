namespace VW.parsers.flatbuffer;

struct FeatureNum {
  hash:uint64;
  value:float;
}

table FeatureStr {
  name:string;
  value:float;
}

table Namespace {
  name:string;
  hash:uint8;
  featuresNum:[FeatureNum];
  featuresStr:[FeatureStr];
}

table SimpleLabel {
  label:float;
  weight:float;
}

table CB_class {
  action:uint32;
  cost:float;
  probability:float;
  partial_pred:float;
}

table CBLabel {
  weight:float;
  costs:[CB_class];
}

table CB_EVAL_Label {
  action:uint32;
  event:CBLabel;
}

table MultiLabel {
  labels:[uint32];
}

table MultiClass {
  label:uint32;
  weight:float;
}

enum CCB_Slates_example_type : byte {unset=0, shared=1, action=2, slot=3}

table action_score {
  action:uint32;
  score:float;
}

table CCB_outcome {
  cost:float;
  probabilities:[action_score];
}

table CCBLabel {
  example_type:CCB_Slates_example_type;
  outcome:CCB_outcome;
  explicit_included_actions:[uint32];
  weight:float;
}

table wclass {
  x:float;
  partial_pred:float;
  wap_value:float;
  class_index:uint32;
}

table CS_Label {
  costs:[wclass];
}

table no_label {
  label:ubyte;
}

table Slates_Label {
  example_type:CCB_Slates_example_type;
  weight:float;
  labeled:bool;
  cost:float;
  slot:uint32;
  probabilities:[action_score];
}

union Label {SimpleLabel, CBLabel, CB_class, CCBLabel, MultiClass, MultiLabel, CB_EVAL_Label, CS_Label, no_label, Slates_Label}

table Example {
  namespaces:[Namespace];
  label:Label;
  tag:string;
}

table MultiExample
{
  namespaces:[Namespace];
  shared:Label;
  label:Label; // right now either cs_label or cb_class
  example_w_label:uint32;
  /// tag?
}

table ExampleCollection {
  examples:[Example];
  multi_examples:[MultiExample];
  is_multiline:bool;
}

union ExampleType {Example, ExampleCollection, MultiExample}

table ExampleRoot
{
  example_obj:ExampleType;
}

root_type ExampleRoot;